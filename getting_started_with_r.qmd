# Introdução ao R

```{r}
#| echo: false
source(file = "_common.R")
linux_logo <- fontawesome::fa(name = "linux")
macos_logo <- fontawesome::fa(name = "apple")
windows_logo <- fontawesome::fa(name = "windows")
```

Para começar a usar o `r r_logo`, você precisará baixar uma cópia do `r r_logo` e também do RStudio IDE, um ambiente de desenvolvimento integrado (IDE) gratuito, que simplifica o uso do `r r_logo`. Tanto o `r r_logo` quanto o RStudio IDE são de código aberto, o que significa que não há custos de licenciamento envolvidos.

Antes de descrever o processo de instalação, é importante entender como o `r r_logo` e o RStudio IDE funcionam juntos, e também como estender sua funcionalidade usando pacotes e outros softwares complementares. [@ismay_statistical_2020, cap. 1] fornecem uma excelente explicação pedagógica desses conceitos. Esta seção se baseia na abordagem deles e utiliza as mesmas analogias.

## R e RStudio IDE

O `r r_logo` é como o motor de um carro, enquanto o RStudio IDE funciona como o volante e o painel, conforme ilustrado na @fig-r-vs-rstudio-ide-1. Assim como um motorista interage principalmente com o volante e o painel para controlar o carro, raramente precisando interagir diretamente com o motor, o RStudio IDE também oferece uma interface amigável para trabalhar com o poderoso mecanismo do `r r_logo`. Essa interface simplifica o processo de usar o `r r_logo` para suas tarefas.

::: {#fig-r-vs-rstudio-ide-1 layout="[[49, -2, 49]]"}
![R: Motor](images/engine.png){#fig-r-1}

![RStudio IDE: Painel](images/dashboard.png){#fig-rstudio-ide-1}

Analogia da diferença entre `r r_logo` e RStudio IDE
:::

## Como baixar e instalar o R

Para obter uma cópia e a versão oficial mais recente do `r r_logo`, acesse [The Comprehensive R Archive Network (CRAN)]({{< var url.cran >}}). O `r r_logo` é desenvolvido para as famílias de sistemas operacionais Unix, Windows e Mac. Na CRAN, você encontrará 3 links para baixar o `r r_logo` para Linux, macOS ou Windows:

-   `r linux_logo`: Clique em **Download R for Linux**, escolha sua distribuição e siga as instruções de instalação específicas para sua distribuição.

-   `r macos_logo`: Clique em **Download R for macOS**. Selecione o instalador que corresponda à sua versão do macOS, abra-o e siga as instruções na tela.

-   `r windows_logo`: Clique em **Download R for Windows** e, em seguida, clique em **base**. Depois, clique no primeiro link no topo da nova página e execute o instalador. O instalador irá guiá-lo através do processo de instalação.

## Como baixar e instalar o RStudio IDE

Para obter a versão oficial mais recente do RStudio IDE, acesse <https://posit.co/download/rstudio-desktop/>. Role a página para baixo, selecione seu sistema operacional e baixe o instalador apropriado. Abra o instalador e siga as instruções fornecidas.

Agora que você instalou o `r r_logo` e o RStudio IDE, você está pronto para começar a trabalhar no RStudio IDE. Assim como você interage principalmente com o volante e o painel de um carro em vez do motor, você focará em usar a interface do RStudio IDE para trabalhar com o `r r_logo`.

Ao abrir o RStudio IDE, você pode criar um novo script `r r_logo` selecionando **File \> New File \> R Script** ou usando o atalho de teclado **Ctrl + Shift + N** or **Cmd+Shift+N**. Você verá quatro painéis principais na interface, como mostrado na @fig-rstudio-ide-panels:

-   **Painel 1**: É onde você escreve, edita e salva seu código R.
-   **Painel 2**: Aqui você pode digitar os comandos do R e ver os resultados.
-   **Painel 3**: Este painel mostra os objetos do R (como variáveis ou dados) que você criou durante a sessão atual.
-   **Painel 4**: Vários elementos de saída, incluindo arquivos, gráficos e documentos de ajuda, são exibidos aqui.

![Painéis do RStudio IDE](images/panels_rstudio_ide.png){#fig-rstudio-ide-panels}

### Configurar e personalizar o RStudio IDE

Para personalizar seu espaço de trabalho, acesse **Tools \> Global Options**. Em seguida:

-   Sempre inicie o `r r_logo` com uma sessão em branco, @fig-r-blank-slate:

![Configuração do espaço de trabalho](images/r_blank%20slate.png){#fig-r-blank-slate}

-   Use o operador de pipe nativo, `|>`, @fig-native-pipe-operator:

![Configuração para usar o operador de pipe nativo](images/native_pipe_operator.png){#fig-native-pipe-operator}

-   Ajuste o tamanho da fonte e selecione um tema escuro, @fig-font-size-dark-theme:

![Configuração para usar um tema escuro](images/font_size_dark_theme.png){#fig-font-size-dark-theme}

A aplicação dessas mudanças personalizará sua experiência com o RStudio IDE, como mostrado na @fig-customize-rstudio-ide.

![Resultado da aplicação da configuração completa](images/customize_rstudio_ide.png){#fig-customize-rstudio-ide}

## Executar código usando o RStudio IDE

Para nos comunicarmos com uma máquina, escrevemos instruções em uma linguagem especializada chamada código. Este código é então traduzido em um formato que a máquina entende, permitindo que ela execute as tarefas que definimos.

Vamos começar com um exemplo simples! Digite `1 + 2 + 3 + 4 + 5 + 6`, como mostrado na @fig-executing-code-example, e então aperte **Enter** or **Return** para ver o que acontece!

![Executando código no console](images/executing_code_example.png){#fig-executing-code-example}

Se você seguiu as instruções certinho, o RStudio IDE vai mostrar o seguinte resultado:

```{r}
1 + 2 + 3 + 4 + 5 + 6
```

Ao executar o código, você pode encontrar mensagens , avisos ou erros. Não entre em pânico! Estas são maneiras do seu computador se comunicar com você:

-   **Mensagem (Message)**: É simplesmente uma nota informativa. Seu código ainda será executado sem problemas.

-   **Aviso (Warning)**: Alerta você sobre potenciais resultados inesperados, mas seu código ainda será executado.

-   **Erro (Error)**: Indica um problema fundamental que impede o seu código de ser executado. Você precisará corrigir o problema para que seu código possa funcionar.

Mais adiante, você usará o comando `install.packages()`, onde poderá encontrar mensagens. Para avisos ou erros, tente os seguintes comandos para ilustrar as diferenças:

```{r}
log(x = -1)
```

```{r}
#| error: true
"Tudo bem" * 2
```

No primeiro caso, o código será executado, mas você verá o resultado `NaN` (**Not a Number**, em inglês) porque o logaritmo de um número negativo é indefinido. No segundo caso, seu código não será executado porque o `r r_logo` não permite a multiplicação de palavras.

::: callout-note
No `r r_logo`, uma string é uma coleção de um ou mais caracteres e são criadas usando aspas duplas, `""`. Por exemplo, `"Tudo bem"` é uma string.
:::

## Objetos, funções e o operador de atribuição

Tudo que existe no `r r_logo` é um **objeto** [@chambers_object-oriented_2014, p. 170]. Isso significa que números, textos e até mesmo instruções para o computador são todos tratados como objetos. Você manipula esses objetos usando **funções**, que recebem objetos como entrada e produzem novos objetos como saída.

Por exemplo, quando você soma os números `1, 2, 3, 4, 5` e `6` (que são objetos), você usa a função `+` repetidamente para criar um novo objeto `21`. O `r r_logo` é construído sobre a ideia de que objetos e funções trabalham juntos.

Para trabalhar com objetos de forma simples, você pode atribuir nomes a eles usando o operador `<-`. Uma vez que um objeto tenha um nome, você pode manipulá-lo chamando esse nome.

Para entender esses conceitos de maneira prática, vamos considerar o processo de jogar uma moeda usando o `r r_logo`.

### Objeto moeda

Vamos imaginar uma moeda padrão com dois lados: cara e coroa, como mostrado na @fig-coin-head-tail.

![Os dois lados de uma moeda](images/coin_head_tail.png){#fig-coin-head-tail}

Para simular um lançamento de moeda em `r r_logo`, primeiro precisamos criar um objeto que represente nossa moeda com seus dois lados: cara e coroa. Vamos atribuir um nome a esse objeto usando `<-`. Veja como combinar esses elementos em R usando a função `c()`:

```{r}
moeda <- c("cara", "coroa")
```

::: callout-note
Para representar os dois lados da moeda, usamos duas strings: `"cara"` e `"coroa"`. Usar apenas `cara` e `coroa` sem aspas duplas poderia causar problemas, pois o `r r_logo` as interpretaria como nomes associados a alguns objetos, em vez de valores representando os dois lados da moeda.
:::

Agora que associamos um nome ao nosso objeto moeda, podemos manipulá-lo simplesmente chamando o nome `moeda`:

```{r}
moeda
```

Quando um objeto tem um nome, ele aparecerá na aba Ambiente (**Environment**, em inglês) do painel 3 no RStudio IDE, como mostrado na @fig-panel3-environment-tab.

![Aba de ambiente](images/panel3_environment_tab.png){#fig-panel3-environment-tab}

### Jogar uma moeda

Agora que você criou um objeto no `r r_logo`, é hora de simular o lançamento de uma moeda. Uma maneira de fazer isso é com a função `sample`:

```{r}
sample(x = moeda, size = 1)
```

Aqui, o argumento `x` informa à função qual objeto usar para selecionar os elementos. O argumento `size` especifica quantos elementos escolher, neste caso `size = 1` para representar o lançamento de uma única moeda.

Vamos tentar jogar a moeda duas vezes:

```{r}
sample(x = moeda, size = 2)
```

E que tal 3 vezes?

```{r}
#| error: true
#| code-overflow: wrap
sample(x = moeda, size = 3)
```

Você encontrará um erro. Não se preocupe, os erros são úteis. A mensagem de erro menciona o argumento `replace`. Para aprender mais sobre qualquer função, use `?` seguido do nome da função, como `?sample`, conforme mostrado na @fig-help-sample-replace.

![Como obter ajuda no `r r_logo`](images/help_sample_replace.png){#fig-help-sample-replace}

Quando `replace = FALSE`, cada item em `x` só pode ser escolhido uma vez. Para simular vários lançamentos de uma moeda, em que cada resultado tem a mesma probabilidade de ser selecionado a cada vez, `replace = TRUE`:

```{r}
sample(x = moeda, size = 3, replace = TRUE)
```

Agora temos todos os componentes para construir uma função na próxima seção. Comecemos simulando quatro lançamentos de uma moeda:

```{r}
lados <- c("cara", "coroa")
n_lancamentos <- 4
com_reposicao <- TRUE
lancamentos <- sample(x = lados, 
                      size = n_lancamentos, 
                      replace = com_reposicao)
lancamentos
```

::: callout-important
Para melhorar a legibilidade do código, seguiremos estas diretrizes:

-   **Nomes de objetos**: Use apenas letras minúsculas sem acentos, números e sublinhados, `_`, para nomes de objetos.

-   **Separação de palavras**: Utilize sublinhados para separar palavras dentro de um nome (isso é conhecido como [snake case](https://en.wikipedia.org/wiki/Snake_case)).

-   **Nomes significativos**: Escolha nomes de objetos que reflitam com precisão o que eles representam.
:::

### Definindo novas funções

No `r r_logo`, uma função tem três partes básicas: um nome, um corpo e um conjunto de argumentos[^getting_started_with_r-1]. Para criar uma, usamos a função `function`, seguindo esta estrutura:

[^getting_started_with_r-1]: Funções possuem complexidades adicionais, mas vamos manter a explicação simples por enquanto. Se você ficar curioso mais tarde, confira [@wickham_advanced_2019, chap. 6] quando tiver mais experiência com o `r r_logo`.

```{r}
nome <- function(argumentos) {
  corpo
}
```

Vamos construir nossa função de lançamento de uma moeda passo a passo. Por enquanto, começaremos sem usar argumentos:

```{r}
jogar_moeda <- function() {
  
  lados <- c("cara", "coroa")
  n_lancamentos <- 4
  com_reposicao <- TRUE
  lancamentos <- sample(x = lados, 
                        size = n_lancamentos, 
                        replace = com_reposicao)
  
  return(lancamentos)
}
```

::: callout-tip
Em uma função bem estruturada, usamos a declaração `return` no final do corpo para especificar explicitamente o valor que queremos que a função retorne. Isso é considerado uma boa prática na programação em `r r_logo`.
:::

Copie e cole o código acima no console, pressione **Enter** or **Return** e verifique a aba Ambiente (**Environment**, em inglês) do RStudio IDE, como mostrado na @fig-running-toss-coin.

![Funções e aba Ambiente](images/running_toss_coin.png){#fig-running-toss-coin}

Agora vamos ver se a função realmente funciona:

```{r}
jogar_moeda()
```

Você pode se perguntar: *Por que não usar simplesmente `jogar_moeda`?* Vamos tentar e ver o que acontece:

```{r}
jogar_moeda
```

Nesse caso, o `r r_logo` vai te mostrar o código da função em vez de executá-la como faz quando você digita `jogar_moeda()`.

### Argumentos

Para tornar nossa função mais flexível, vamos permitir que o usuário especifique o número de lançamentos de moeda. Podemos fazer isso transformando n_lancamentos em um argumento da função:

```{r}
jogar_moeda <- function(n_lancamentos) {
  
  lados <- c("cara", "coroa")
  com_reposicao <- TRUE
  lancamentos <- sample(x = lados, 
                        size = n_lancamentos, 
                        replace = com_reposicao)
  
  return(lancamentos)
}
```

Agora, o usuário pode personalizar o número de lançamentos, especificando um valor maior ou igual a um. Vamos tentar com sete lançamentos:

```{r}
jogar_moeda(n_lancamentos = 7)
```

Também podemos definir valores padrão para os argumentos de uma função. Esses valores serão usados se o usuário não fornecer um valor, oferecendo flexibilidade e permitindo personalização se necessário. Vamos ilustrar essa opção definindo um valor padrão para o argumento lados:

```{r}
jogar_moeda <- function(n_lancamentos, 
                        lados = c("cara", "coroa")) {
  
  com_reposicao <- TRUE
  lancamentos <- sample(x = lados, 
                        size = n_lancamentos, 
                        replace = com_reposicao)
  
  return(lancamentos)
}
```

Se o usuário estiver satisfeito com as etiquetas "cara" e "coroa" para os lados da moeda, então podemos jogar uma moeda nove vezes da seguinte forma:

```{r}
jogar_moeda(n_lancamentos = 9)
```

No entanto, se o usuário quiser alterar o valor do argumento lados, mudando seus valores para refletir os lados da moeda mostrados na @fig-coin-head-tail, podemos proceder da seguinte maneira:

```{r}
jogar_moeda(n_lancamentos = 9, lados = c("cabeca", "navio"))
```

A @fig-function-components, inspirada em [@grolemund_hands-programming_2015, chap. 1], ilustra os componentes de uma função usando como exemplo `jogar_moeda`.

![Componentes de uma função](images/function_components.png){#fig-function-components}

## Projetos no RStudio

### Por que usar projetos?

Quando você trabalha com dados (sejam reais ou simulados) ou aprende novos conceitos de estatística usando `r r_logo`, manter seus arquivos organizados é fundamental. Os Projetos do RStudio oferecem uma ótima maneira de fazer isso! Veja o que significa organizar seu trabalho em projetos:

-   **Pasta de projeto dedicada**: Pense nela como um container especial para cada tópico. Todos os seus arquivos relacionados (anotações, código, dados) ficam nesta pasta.

-   **Nomenclatura clara**: Dê aos seus arquivos nomes descritivos para que você possa encontrar facilmente o que precisa depois.

-   **Seu ponto de partida**: Esta pasta se torna seu local de referência para qualquer coisa relacionada a esse projeto.

Os projetos do RStudio ajudam a manter seu trabalho organizado e fácil de encontrar. Além disso, você pode mover ou compartilhar facilmente um projeto inteiro, já que tudo fica junto.

Vamos começar criando um projeto chamado **estatistica_descritiva** onde organizaremos nosso trabalho sobre a função `jogar_moeda`.

### Como criar um projeto no RStudio

Projetos no RStudio podem ser criados de três formas diferentes:

-   Em um novo diretório
-   Em um diretório existente.
-   Clonando um repositório de controle de versão.

Vamos focar na criação de um projeto totalmente novo, então você não precisa se preocupar com as outras opções.

Para criar um novo projeto de RStudio:

-   Selecione **File \> New Project**
-   Escolha a opção **New Directory** (Veja @fig-create-project)
-   Selecione **New Project**, escolha onde salvar o seu projeto e nomeie-o como **estatistica_descritiva** (Veja @fig-project-type-directory-name)

![Criação de um projeto](images/create_project.png){#fig-create-project}

![Nome e localização do projeto](images/project_type_directory_name.png){#fig-project-type-directory-name}

Se você seguir esses passos, uma pasta chamada **estatistica_descritiva** será criada com um arquivo **estatistica_descritiva.Rproj** dentro dela. Para manter tudo organizado, crie uma nova pasta chamada **000_scripts** dentro da pasta do projeto. A estrutura do seu projeto agora deve se parecer com a @fig-initial-project-structure.

![Estrutura inicial do projeto](images/initial_project_structure.png){#fig-initial-project-structure}

### Trabalhando com projetos

Se fechar o RStudio IDE, para abrir o projeto e começar a trabalhar nele, é sempre necessário seguir os passos abaixo:

-   Abra a pasta **estatistica_descritiva**
-   Clique duas vezes no arquivo **estatistica_descritiva.Rproj**

Sempre siga estes passos para começar a trabalhar em seu projeto!

## Scripts

Escrever código diretamente no console é bom para testes rápidos, mas não permite salvar seu trabalho facilmente. Scripts são essenciais porque eles:

-   **Preservam o progresso**: Salve seu código para usá-lo novamente mais tarde sem ter que reescrever tudo.
-   **Documentam o processo**: Adicione anotações e explicações para ajudar você (e outros!) a entender seu código no futuro.

Vamos começar criando um script para a nossa função `jogar_moeda`:

-   Selecione **File \> New File \> R Script**.
-   Copie e cole o código da função `jogar_moeda` neste script.
-   Salve o arquivo na sua pasta **000_scripts** e nomeie-o como **jogar_moeda.R**.

A estrutura do seu projeto agora deve se parecer com algo assim:

```         
📦estadistica_descritiva
  |-📂000_scripts
  |  |-📜jogar_moeda.R
  |-📜estadistica_descritiva.Rproj
```

Além disso, `r r_logo` e o RStudio IDE tornam fácil adicionar comentários aos seus scripts das seguintes maneiras:

-   **Comentários**: Comece uma linha com `#` e adicione seu comentário.
-   **Seções de código**: Use quatro traços seguidos, `----`, para criar uma seção.

Vamos documentar seu script **jogar_moeda.R** apontando o propósito e o valor de saída da função `jogar_moeda`:

```{r}
#| eval: false

# Função jogar_moeda ----

# Propósito ----
# Simular uma série de lançamentos de uma moeda

# Saída ----
# Um vetor contendo os resultados de cada 
# lançamento de uma moeda

jogar_moeda <- function(n_lancamentos, 
                        lados = c("cara", "coroa")) {
  
  com_reposicao <- TRUE
  lancamentos <- sample(x = lados, 
                        size = n_lancamentos, 
                        replace = com_reposicao)
  
  return(lancamentos)
}
```

Agora, seu script está bem documentado e fácil de entender. Este processo é mostrado na @fig-documented-script usando o RStudio IDE.

![Script documentado](images/documented_script.png){#fig-documented-script}

## Pacotes

Em `r r_logo`, funções, conjuntos de dados e documentação são organizados em pacotes. Alguns deles, conhecidos como pacotes **base** vêm pré-instalados com `r r_logo`. No entanto, existe um vasto conjunto de pacotes criados pela comunidade `r r_logo` que adicionam todo tipo de ferramentas adicionais.

Para usar esses pacotes criados pela comunidade, você precisará instalá-los. Esses pacotes são armazenados em repositórios, sendo o [CRAN]({{< var url.cran >}}) a principal fonte de pacotes `r r_logo` de propósito geral. Embora existam repositórios especializados como o [Bioconductor]({{< var url.bioconductor >}}), vamos nos concentrar apenas naqueles encontrados no [CRAN]({{< var url.cran >}}).

[@ismay_statistical_2020, cap. 1] têm uma analogia útil: pense em `r r_logo` como um smartphone novinho. Ele tem alguns aplicativos essenciais pré-instalados, mas você pode instalar uma vasta gama de novos aplicativos para realizar todos os tipos de tarefas específicas. Nesta analogia, os pacotes são como aplicativos, e os repositórios são como lojas de aplicativos.

### Instalando pacotes do CRAN

Instalar pacotes no `r r_logo` é semelhante a instalar aplicativos no seu celular. Você instala uma única vez e faz atualizações ocasionais. Para instalar um pacote do [CRAN]({{< var url.cran >}}), use a função `install.packages`, especificando o nome do pacote entre aspas duplas. Por exemplo, para instalar o pacote `tidyverse`, um conjunto popular de ferramentas para ciência de dados, você só precisa executar o seguinte código:

```{r}
#| eval: false
install.packages("tidyverse")
```

### Usando um pacote

Depois de instalar o pacote `tidyverse`, vamos utilizá-lo junto com a função `jogar_moeda`. Antes de fazer isso, vamos organizar o projeto da seguinte forma:

-   Crie uma pasta chamada **000_introdução_r**.
-   Dentro dessa pasta, crie um script chamado **001_introdução_r_script.R**.

A estrutura do seu projeto agora deve se parecer com algo assim:

```         
📦estadistica_descritiva
  |-📂000_introducao_r
  |  |-📜001_introducao_r_script.R
  |-📂000_scripts
  |  |-📜jogar_moeda.R
  |-📜estadistica_descritiva.Rproj
```

Pense em um pacote como um aplicativo no seu celular, você precisa abri-lo antes de usá-lo. No `r r_logo`, usamos a função `library` para isso. Adicione este código ao seu arquivo **001_introdução_r_script.R** para usar o pacote `tidyverse`:

```{r}
#| eval: false

# Pacotes ----
library(tidyverse)
```

Para executar o código em seu script, clique dentro da janela do script e escolha como rodar o código:

-   Linha por linha: pressione **Ctrl+Enter** (ou **Cmd+Return** no Mac).
-   Tudo de uma vez: pressione **Ctrl+Shift+Enter** (ou **Cmd+Shift+Return** no Mac).

Como `jogar_moeda` não é parte de um pacote, vamos usar a função `source` para carregá-la diretamente do seu projeto:

```{r}
#| eval: false

# Funções ----
source(file = "000_scripts/jogar_moeda.R")
```

Execute essa linha e cheque a aba Ambiente (**Environment**, em inglês), você deve ver a função `jogar_moeda` listada. Agora, vamos usar o `tidyverse` para um pouco de diversão com visualização. Não se preocupe em entender os detalhes do código, você aprenderá mais na @sec-data-visualization . Apenas foque nos resultados:

```{r}
#| eval: false

# Gráfico ----
ggplot() +
  geom_bar(aes(x = jogar_moeda(n_lancamentos = 1000)))
```

Execute esse código e você deve ver um gráfico como mostrado na @fig-using-tidyverse-package

![Usando o pacote `tidyverse`](images/using_tidyverse_package.png){#fig-using-tidyverse-package}
